{"version":3,"sources":["Components/ContactList/ContactList.module.css","Components/ContactList/ContactList.jsx","redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","Components/ContactForm/ContactForm.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","connect","state","contacts","items","dispatch","onDeleteContact","map","id","name","number","className","styles","list","onClick","type","types","payload","shortid","generate","ContactForm","nameInputId","numberInputId","handleNameChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","formReset","this","htmlFor","onChange","pattern","title","required","Component","contactsActions","App","onChangFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","combineReducers","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba9ff228.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1_AI1\",\"button\":\"ContactList_button__21n16\"};","\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    contacts.map(({ id, name, number }) => (\r\n        <ul>\r\n            <li key={id} className={styles.list}>{name}: {number}\r\n            <button onClick ={()=>onDeleteContact(id)}>Delete</button></li>\r\n        </ul>\r\n    ))\r\n);\r\n\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\nonDeleteContact: () => null,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","export default {\r\n    ADD: 'contacts/add',\r\n    DELETE: 'contacts/delete',\r\n    CHANGE_FILTER: 'contacts/changeFilter',\r\n};","import shortid from 'shortid';\r\nimport types from './contacts-types';\r\n\r\nconst formSubmitHandler = (name, number) => ({\r\n    type: types.ADD,\r\n    payload: { id: shortid.generate(), name, number }\r\n});\r\n\r\n\r\nconst onDeleteContact = contactId => ({\r\n    type: types.DELETE,\r\n    payload: contactId,\r\n});\r\n\r\n\r\n\r\n\r\nexport default { formSubmitHandler, onDeleteContact };","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport shortid from 'shortid';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n   nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleNameChange = event => {\r\n    // console.log(event.currentTarget.value);\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name] : value });\r\n    };\r\n    \r\n\r\n     handleSubmit = event => {\r\n    event.preventDefault();\r\n         this.props.onSubmit(this.state);\r\n         this.formReset();\r\n         \r\n    }\r\n    \r\n    formReset = () => {\r\n        this.setState({\r\n            name: '',\r\n            number: '',\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor={ this.nameInputId}>name\r\n                    <input\r\n                        type='text'\r\n                        name='name'\r\n                        value={this.state.name}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.nameInputId}\r\n                    />\r\n                    </label>\r\n                    \r\n              \r\n                <label htmlFor={ this.numberInputId}>number\r\n                    <input\r\n                        type='tel'\r\n                    name='number'\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                        value={this.state.number}\r\n                        onChange={this.handleNameChange}\r\n                        id={this.numberInputId}\r\n                    />\r\n                </label>\r\n                \r\n                <button type='submit'>Add contacts</button>\r\n          \r\n        </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name,number) => dispatch (contactsActions.formSubmitHandler(name,number)),\r\n})\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import { Component } from \"react\";\nimport shortid from 'shortid';\nimport ContactList from './Components/ContactList/ContactList';\nimport ContactForm from './Components/ContactForm/ContactForm';\nimport Filter from './Components/Filter/Filter';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [],\n  //    filter: '',\n  // };\n\n  \n // ЛОКАЛСТОРЕДЖ\n  //  componentDidMount() {\n  //   console.log('componentDidMount');\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({\n  //       contacts: parsedContacts\n  //     });\n  //   }\n    \n  // };\n\n\n \n  // componentDidUpdate(prevProps, prevState) {\n    \n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // };\n\n\n\n  \n// додаємо контакт\n  // formSubmitHandler = ({ name, number }) => {\n  //   if (this.state.contacts.some(el => el.name === name)) {\n  //     alert(`${name} is already in contacts.`);\n  //   } else {\n  //     const newContact = { id: shortid.generate(), name, number };\n  //     console.log(newContact);\n\n  //   this.setState(({contacts}) => ({\n  //     contacts: [...contacts, newContact]\n  //   }))\n  //   }\n  // };\n\n  onChangFilter = (event) => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n\n  \n\n  // onDeleteContact = (contactId) => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId)\n  //   }))\n  // };\n\n  getVisibleContacts = () => {\n    // деструктуризуєм фільтер і контакти\n    const {filter, contacts} = this.state;\n    // const normalizedFilter = this.state.filter.toLowerCase();\n    const normalizedFilter = filter.toLowerCase();\n    // return this.state.contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }\n\n\n \n\n  render() {\n\n    // const visibleContacts = this.getVisibleContacts();\n\n    return (   \n  <div>\n  <h1>Phonebook</h1>\n  <ContactForm />\n\n  <h2>Contacts</h2>\n  {/* <Filter value = {this.state.value} changFilter ={this.onChangFilter} /> */}\n        <ContactList />\n</div>\n  )\n\n\n} \n}\n\nexport default App;\n\n\n\n","import { combineReducers } from 'redux';\r\nimport types from './contacts-types';\r\n// {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: ''\r\n//   }\r\n// }\r\n\r\n\r\nconst items = (state = [], { type, payload }) => {\r\n    switch (type) {\r\n        case types.ADD:\r\n            return [...state, payload];\r\n       \r\n        \r\n        case types.DELETE:\r\n            return state.filter(({ id }) => id !== payload);\r\n        \r\n        default: return state;\r\n    }\r\n   \r\n};\r\n\r\nconst filter = (state = '', action) => {\r\n    return state;\r\n}\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n})","import { createStore, combineReducers} from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: contactsReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}